trigger:
  - master
pr:
  branches:
    include:
      - '*'

variables:
  buildConfiguration: 'Release'
  vmImage: 'windows-latest'
  azureSubscription: C5

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool: $(vmImage)
        steps:
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              arguments: /P:SourceLinkCreate=false --configuration $(buildConfiguration)

          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: "**/*Tests/*.csproj"
              arguments: '/P:SourceLinkCreate=false --configuration $(buildConfiguration) --collect "Code coverage"'

          - task: CopyFiles@2
            displayName: 'Copy files'
            inputs:
              sourceFolder: $(Build.SourcesDirectory)/C5/bin/$(buildConfiguration)
              contents: '*.nupkg'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true

          - script: |
              CALL npm install -g doxygen
              CALL npm install -g graphviz
              SET DOXYGEN_OUTPUT_DIRECTORY=$(Build.SourcesDirectory)
              CALL doxygen --download
              CALL doxygen --docs --configPath="$(Build.SourcesDirectory)/Doxyfile"
            workingDirectory: $(Build.SourcesDirectory)
            displayName: 'Generate documentation'
            failOnStderr: true

          - task: ArchiveFiles@2
            displayName: 'Archive documentation'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/C5.Docs/html'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/c5docs.zip'

          - task: PublishBuildArtifacts@1
            displayName: Publish Build Artifacts
            inputs:
              artifactName: 'drop'
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'

  - stage: Release
    displayName: Release
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: Release
        steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: c5'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: c5
              packageForLinux: $(System.DefaultWorkingDirectory)/**/c5docs.zip
